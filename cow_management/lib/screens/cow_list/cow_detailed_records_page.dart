import 'package:flutter/material.dart';
import 'package:cow_management/models/cow.dart';

class CowDetailedRecordsPage extends StatefulWidget {
  final Cow cow;

  const CowDetailedRecordsPage({
    super.key,
    required this.cow,
  });

  @override
  State<CowDetailedRecordsPage> createState() => _CowDetailedRecordsPageState();
}

class _CowDetailedRecordsPageState extends State<CowDetailedRecordsPage>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('${widget.cow.name} ÏÉÅÏÑ∏ Í∏∞Î°ù'),
        backgroundColor: Color(0xFF4CAF50),
        foregroundColor: Colors.white,
        bottom: TabBar(
          controller: _tabController,
          indicatorColor: Color(0xFF4CAF50),
          labelColor: Colors.black,
          unselectedLabelColor: Colors.grey,
          indicator: const BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.vertical(top: Radius.circular(8)),
          ),
          tabs: const [
            Tab(icon: Icon(Icons.health_and_safety), text: 'Í±¥Í∞ï Ï†ïÎ≥¥'),
            Tab(icon: Icon(Icons.pregnant_woman), text: 'Î≤àÏãù Ï†ïÎ≥¥'),
            Tab(icon: Icon(Icons.rice_bowl), text: 'ÏÇ¨Î£å Ï†ïÎ≥¥'),
          ],
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: [
          _buildHealthTab(),
          _buildBreedingTab(),
          _buildFeedingTab(),
        ],
      ),
    );
  }

  Widget _buildHealthTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          _buildRecordCard(
            title: 'Í±¥Í∞ïÍ≤ÄÏßÑ Í∏∞Î°ù',
            icon: Icons.health_and_safety,
            color: Colors.blue,
            emoji: 'üè•',
            description: 'Ï†ïÍ∏∞ Í±¥Í∞ïÍ≤ÄÏßÑ Î∞è Ï≤¥ÌÅ¨ÏóÖ Í∏∞Î°ù',
            onViewPressed: () => _navigateToList('/health-check/list'),
            onAddPressed: () => _navigateToAdd('/health-check/add'),
          ),
          const SizedBox(height: 16),
          _buildRecordCard(
            title: 'Î∞±Ïã†Ï†ëÏ¢Ö Í∏∞Î°ù',
            icon: Icons.vaccines,
            color: Colors.green,
            emoji: 'üíâ',
            description: 'Î∞±Ïã† Ï†ëÏ¢Ö ÏùºÏ†ï Î∞è Ïù¥Î†• Í¥ÄÎ¶¨',
            onViewPressed: () => _navigateToList('/vaccination/list'),
            onAddPressed: () => _navigateToAdd('/vaccination/add'),
          ),
          const SizedBox(height: 16),
          _buildRecordCard(
            title: 'Ï≤¥Ï§ëÏ∏°Ï†ï Í∏∞Î°ù',
            icon: Icons.monitor_weight,
            color: Colors.orange,
            emoji: '‚öñÔ∏è',
            description: 'Ï≤¥Ï§ë Î≥ÄÌôî Ï∂îÏù¥ Î∞è ÏÑ±Ïû• Í∏∞Î°ù',
            onViewPressed: () => _navigateToList('/weight/list'),
            onAddPressed: () => _navigateToAdd('/weight/add'),
          ),
          const SizedBox(height: 16),
          _buildRecordCard(
            title: 'ÏπòÎ£å Í∏∞Î°ù',
            icon: Icons.medical_services,
            color: Colors.red,
            emoji: 'ü©∫',
            description: 'ÏßàÎ≥ë ÏπòÎ£å Î∞è Ï≤òÎ∞© Í∏∞Î°ù',
            onViewPressed: () => _navigateToList('/treatment/list'),
            onAddPressed: () => _navigateToAdd('/treatment/add'),
          ),
        ],
      ),
    );
  }

  Widget _buildBreedingTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          _buildRecordCard(
            title: 'Î∞úÏ†ï Í∏∞Î°ù',
            icon: Icons.waves,
            color: Colors.pink,
            emoji: 'üíï',
            description: 'Î∞úÏ†ï Ï£ºÍ∏∞ Î∞è ÌñâÎèô Í¥ÄÏ∞∞ Í∏∞Î°ù',
            onViewPressed: () => _navigateToList('/estrus-record/list'),
            onAddPressed: () => _navigateToAdd('/estrus-record/add'),
          ),
          const SizedBox(height: 16),
          _buildRecordCard(
            title: 'Ïù∏Í≥µÏàòÏ†ï Í∏∞Î°ù',
            icon: Icons.medical_services_outlined,
            color: Colors.blue,
            emoji: 'üéØ',
            description: 'Ïù∏Í≥µÏàòÏ†ï Ïã§Ïãú Î∞è Í≤∞Í≥º Í∏∞Î°ù',
            onViewPressed: () => _navigateToList('/insemination-record/list'),
            onAddPressed: () => _navigateToAdd('/insemination-record/add'),
          ),
          const SizedBox(height: 16),
          _buildRecordCard(
            title: 'ÏûÑÏã†Í∞êÏ†ï Í∏∞Î°ù',
            icon: Icons.search,
            color: Colors.purple,
            emoji: 'ü§±',
            description: 'ÏûÑÏã† ÌôïÏù∏ Î∞è Í∞êÏ†ï Í≤∞Í≥º',
            onViewPressed: () => _navigateToList('/pregnancy-check/list'),
            onAddPressed: () => _navigateToAdd('/pregnancy-check/add'),
          ),
          const SizedBox(height: 16),
          _buildRecordCard(
            title: 'Î∂ÑÎßå Í∏∞Î°ù',
            icon: Icons.child_care,
            color: Colors.teal,
            emoji: 'üë∂',
            description: 'Î∂ÑÎßå Í≥ºÏ†ï Î∞è ÏÜ°ÏïÑÏßÄ Ï†ïÎ≥¥',
            onViewPressed: () => _navigateToList('/calving-record/list'),
            onAddPressed: () => _navigateToAdd('/calving-record/add'),
          ),
        ],
      ),
    );
  }

  Widget _buildFeedingTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          _buildRecordCard(
            title: 'ÏÇ¨Î£åÍ∏âÏó¨ Í∏∞Î°ù',
            icon: Icons.rice_bowl,
            color: Colors.brown,
            emoji: 'üåæ',
            description: 'ÏÇ¨Î£å Ï¢ÖÎ•ò, Í∏âÏó¨Îüâ Î∞è ÏãúÍ∞Ñ Í∏∞Î°ù',
            onViewPressed: () => _navigateToList('/feeding-record/list'),
            onAddPressed: () => _navigateToAdd('/feeding-record/add'),
          ),
          const SizedBox(height: 16),
          _buildRecordCard(
            title: 'Ï∞©Ïú† Í∏∞Î°ù',
            icon: Icons.local_drink,
            color: Colors.indigo,
            emoji: 'ü•õ',
            description: 'Ï∞©Ïú†Îüâ, Ïú†ÏÑ±Î∂Ñ Î∞è ÌíàÏßà Í∏∞Î°ù',
            onViewPressed: () => _navigateToList('/milking-records'),
            onAddPressed: () => _navigateToAdd('/milking-record-add'),
          ),
        ],
      ),
    );
  }

  Widget _buildRecordCard({
    required String title,
    required IconData icon,
    required Color color,
    required String emoji,
    required String description,
    required VoidCallback onViewPressed,
    required VoidCallback onAddPressed,
  }) {
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Container(
        padding: const EdgeInsets.all(20),
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(12),
          gradient: LinearGradient(
            colors: [color.withOpacity(0.1), Colors.white],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: color.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Text(
                    emoji,
                    style: const TextStyle(fontSize: 24),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        title,
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: color,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        description,
                        style: TextStyle(
                          fontSize: 14,
                          color: Colors.grey[600],
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            Row(
              children: [
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: onViewPressed,
                    icon: const Icon(Icons.list, size: 18),
                    label: const Text('Í∏∞Î°ù Î≥¥Í∏∞'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: color,
                      foregroundColor: Colors.white,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: OutlinedButton.icon(
                    onPressed: onAddPressed,
                    icon: const Icon(Icons.add, size: 18),
                    label: const Text('Í∏∞Î°ù Ï∂îÍ∞Ä'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: color,
                      side: BorderSide(color: color),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  void _navigateToList(String route) {
    Navigator.pushNamed(
      context,
      route,
      arguments: {
        'cowId': widget.cow.id,
        'cowName': widget.cow.name,
      },
    );
  }

  void _navigateToAdd(String route) {
    Navigator.pushNamed(
      context,
      route,
      arguments: {
        'cowId': widget.cow.id,
        'cowName': widget.cow.name,
      },
    );
  }
} 